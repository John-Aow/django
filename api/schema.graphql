type Query {
  allUser(offset: Int, before: String, after: String, first: Int, last: Int, id: ID): UserTypeNodeConnection
  allProduct: [ProductType]
  user(
    """The ID of the object"""
    id: ID!
  ): UserTypeNode
  cartOrder(offset: Int, before: String, after: String, first: Int, last: Int, userId: ID, status: ApiOrderStatusChoices, status_Icontains: ApiOrderStatusChoices, product: ID): OrderTypeNodeConnection
}

type UserTypeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserTypeNodeEdge]!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A Relay edge containing a `UserTypeNode` and its cursor."""
type UserTypeNodeEdge {
  """The item at the end of the edge"""
  node: UserTypeNode

  """A cursor for use in pagination"""
  cursor: String!
}

type UserTypeNode implements Node {
  """The ID of the object"""
  id: ID!
  name: String!
  lastname: String!
  email: String!
  tel: String!
  wallet: Float!
  orderSet(offset: Int, before: String, after: String, first: Int, last: Int, userId: ID, status: ApiOrderStatusChoices, status_Icontains: ApiOrderStatusChoices, product: ID): OrderTypeNodeConnection!
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

type OrderTypeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [OrderTypeNodeEdge]!
}

"""A Relay edge containing a `OrderTypeNode` and its cursor."""
type OrderTypeNodeEdge {
  """The item at the end of the edge"""
  node: OrderTypeNode

  """A cursor for use in pagination"""
  cursor: String!
}

type OrderTypeNode implements Node {
  """The ID of the object"""
  id: ID!
  product: ProductType
  user: UserTypeNode
  qty: Int
  note: String
  createdAt: Date
  updatedAt: Date
  status: ApiOrderStatusChoices!
}

type ProductType {
  id: ID!
  name: String!
  price: Float!
  detail: String!
  image: String
  orderSet(offset: Int, before: String, after: String, first: Int, last: Int, userId: ID, status: ApiOrderStatusChoices, status_Icontains: ApiOrderStatusChoices, product: ID): OrderTypeNodeConnection!
}

"""An enumeration."""
enum ApiOrderStatusChoices {
  """cart"""
  CA

  """order"""
  OR

  """shipment"""
  SH
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

type Mutation {
  createOrder(orderData: OrderInput!): CreateOrder
  deleteOrder(id: ID!): DeleteOrder
}

type CreateOrder {
  order: OrderType
}

type OrderType {
  id: ID!
  product: ProductType
  user: UserTypeNode
  qty: Int
  note: String
  createdAt: Date
  updatedAt: Date
  status: ApiOrderStatusChoices!
}

input OrderInput {
  id: ID
  product: Int
  user: Int
  qty: Int
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type DeleteOrder {
  cartOrder(offset: Int, before: String, after: String, first: Int, last: Int, userId: ID, status: ApiOrderStatusChoices, status_Icontains: ApiOrderStatusChoices, product: ID): OrderTypeNodeConnection
}